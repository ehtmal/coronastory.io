/** Class StoryManager */
var StoryManager = (function () {

  StoryManager.KEYWORDS = {
    AUTO_RULES: "AUTO_RULES",
    MANUAL_STORIES: "MANUAL_STORIES",
  }

  /** Constructor */
  function StoryManager(countryCode, ruleName, storyName, language, timeSeriesData) {
    this.countryCode = countryCode;
    this.ruleName = ruleName;
    this.storyName = storyName;
    this.language = language;
    this.timeSeriesData = timeSeriesData;
  }

  /** Update Country Code */
  StoryManager.prototype.updateCountryCode = function (countryCode) {
    this.countryCode = countryCode;
  }

  /** Update language */
  StoryManager.prototype.updateLanguage = function (language) {
    localStorage.removeItem(this.getRulesKey());
    this.language = language;
  }


  //#region Rules
  /** Get LocalStorage rules or else default rule */
  StoryManager.prototype.getRules = function () {
    // Get rule from saved LocalStorage
    let rules = JSON.parse(localStorage.getItem(this.getRulesKey()));
    // Load default rule if not existed
    if (rules == null)
      rules = this.getDefaultRules();

    return rules;
  }

  /** Get default rules by language */
  StoryManager.prototype.getDefaultRules = function () {
    return AUTO_RULES[this.countryCode][this.ruleName][this.language];
  }

  /** Get key Rules store in LocalStorage */
  StoryManager.prototype.getRulesKey = function () {
    return StoryManager.KEYWORDS.AUTO_RULES + "_" + this.countryCode + "_" + this.language;
  }

  /** Update RuleName. Get another Rules set */
  StoryManager.prototype.updateRuleName = function (ruleName) {
    localStorage.removeItem(this.getRulesKey());
    this.ruleName = ruleName;
    localStorage.setItem($globalStoryManager.getRulesKey(), JSON.stringify(this.getRules()));
  }

  /** Add a new Rule */
  StoryManager.prototype.addRule = function (rule) {
    let rules = this.getRules();
    rules.push(rule);
    localStorage.setItem($globalStoryManager.getRulesKey(), JSON.stringify(rules));
  }

  /** Update a Rule */
  StoryManager.prototype.updateRule = function (editRule) {
    let rules = this.getRules();
    rules = rules.map(rule => rule.id == editRule.id ? editRule : rule);
    localStorage.setItem($globalStoryManager.getRulesKey(), JSON.stringify(rules));
  }

  /** Delete a Rule by Id */
  StoryManager.prototype.removeRule = function (id) {
    let rules = this.getRules();
    rules = rules.filter(rule => rule.id != id);
    localStorage.setItem($globalStoryManager.getRulesKey(), JSON.stringify(rules));
  }

  /** Sort a rule to new Index by Id */
  StoryManager.prototype.sortRule = function (id, index) {
    let rules = this.getRules();
    let tmp = rules.find(rule => rule.id == id);
    rules = rules.filter(rule => rule.id != id);
    rules.splice(index, 0, tmp);
    localStorage.setItem($globalStoryManager.getRulesKey(), JSON.stringify(rules));
  }

  /** Get stories from Rules */
  StoryManager.prototype.autoStoriesFromRules = function () {
    var rules = this.getRules();
    // Distinct duplicate rules
    var distinct = (rules.map(function (obj) {
      return obj.item + ':' + obj.operator;
    })).filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });

    var splitRules = [];
    distinct.forEach(function (value, index) {
      var itemName = value.split(':')[0];
      var operatorName = value.split(':')[1];
      var group = [];
      rules.forEach(function (rule, id) {
        if (rule.item == itemName && rule.operator == operatorName)
          group.push(rule);
      });
      splitRules.push(group);
    });

    var stories = [];
    // Loop Timeseries data
    for (var countryName in this.timeSeriesData) {
      var station = STATION_DATA.find(obj => obj.name === countryName);
      var countryData = this.timeSeriesData[countryName];
      // Loop Countries
      countryData.forEach(function (value, index) {
        // Loop Rules
        splitRules.forEach(function (group) {
          // Loop
          for (var i = 0; i < group.length; i++) {
            var rule = group[i];
            var before = index == 0 ? 0 : countryData[index - 1][rule.item];
            var after = countryData[index][rule.item];

            // Check rule should create story base on operate function
            if (StoryManager.operate[rule.operator](before, after, rule.value, rule.item)) {
              // Create Story from rule
              stories.push(new Story({
                "type": rule.item,
                "isAutoGenerated": true,
                "title": rule.title,
                "description": rule.message,
                "date": value.date,
                "duration": rule.duration,
                "block": rule.block,
                "latlng": station.latlng,
                "countryName": station.name,
                "countryCode": station.country_code,
                "value": after
              }));

              // Stop if true
              if (rule.stop)
                break;
            }
          }
        });
      });
    }
    return stories;
  };

  /** Get stories from rules in country */
  StoryManager.prototype.getAutoStoriesByCountry = function (countryName) {
    let rules = this.getRules();
    // Distinct duplicate rules
    var distinct = (rules.map(function (obj) {
      return obj.item + ':' + obj.operator;
    })).filter(function (value, index, self) {
      return self.indexOf(value) === index;
    });

    var splitRules = [];
    distinct.forEach(function (value, index) {
      var itemName = value.split(':')[0];
      var operatorName = value.split(':')[1];
      var group = [];
      rules.forEach(function (rule, id) {
        if (rule.item == itemName && rule.operator == operatorName)
          group.push(rule);
      });
      splitRules.push(group);
    });

    var stories = [];
    var station = STATION_DATA.find(obj => obj.name === countryName);
    var countryData = this.timeSeriesData[countryName];
    if (!countryData) {
      return stories;
    }
    // Loop Countries
    countryData.forEach(function (value, index) {
      // Loop Rules
      splitRules.forEach(function (group) {
        // Loop
        for (var i = 0; i < group.length; i++) {
          var rule = group[i];
          var before = index == 0 ? 0 : countryData[index - 1][rule.item];
          var after = countryData[index][rule.item];

          // Check rule should create story base on operate function
          if (StoryManager.operate[rule.operator](before, after, rule.value, rule.item)) {
            // Create Story from rule
            stories.push(new Story({
              "type": rule.item,
              "isAutoGenerated": true,
              "title": rule.title,
              "description": rule.message,
              "date": value.date,
              "duration": rule.duration,
              "block": rule.block,
              "latlng": station.latlng,
              "countryName": station.name,
              "countryCode": station.country_code,
              "value": after
            }));

            // Stop if true
            if (rule.stop)
              break;
          }
        }
      });
    });
    return stories;
  };

  /** Story operate function */
  StoryManager.operate = {
    '>': function (before, after, value, item) {
      if (item.substring(0, 5) === 'daily')
        return after > value;
      return (before <= value && after > value);
    },
    '<': function (before, after, value, item) {
      if (item.substring(0, 5) === 'daily')
        return after < value;
      return (before >= value && after < value);
    },
    '>=': function (before, after, value, item) {
      if (item.substring(0, 5) === 'daily')
        return after >= value;
      return (before < value && after >= value);
    },
    '<=': function (before, after, value, item) {
      if (item.substring(0, 5) === 'daily')
        return after <= value;
      return (before > value && after <= value);
    },
    '==': function (before, after, value, item) {
      if (item.substring(0, 5) === 'daily')
        return after == value;
      return (before != value && after == value);
    },
    '!=': function (before, after, value, item) {
      if (item.substring(0, 5) === 'daily')
        return after != value;
      return (before == value && after != value);
    }
  };
  //#endregion


  //#region Story
  /** Get manual stories by country */
  StoryManager.prototype.getManualsByCountry = function (countryCode) {
    let manualStories = this.getManualStories();
    let manualStory = manualStories.filter(function (manualStory) { return manualStory.countryCode == countryCode });
    return manualStory;
  }

  /** Get LocalStorage Manual Stories or else default stories */
  StoryManager.prototype.getManualStories = function () {
    // Get Manual Stories from saved LocalStorage
    let manualStories = JSON.parse(localStorage.getItem(this.getManualStoriesKey()));
    // Load default Manual Stories if not existed
    if (manualStories == null)
      manualStories = this.getDefaultManualStories();

    manualStories = manualStories.map(function (item) { return new Story(item); });
    return manualStories;
  }

  /** Get default Manual Stories */
  StoryManager.prototype.getDefaultManualStories = function () {
    return MANUAL_STORIES[this.countryCode][this.storyName][this.language];
  }

  /** Get key Manual Stories store in LocalStorage */
  StoryManager.prototype.getManualStoriesKey = function () {
    return StoryManager.KEYWORDS.MANUAL_STORIES + "_" + this.countryCode + "_" + this.language;
  }

  /** Update StoryName. Get another Stories set */
  StoryManager.prototype.updateStoryName = function (storyName) {
    localStorage.removeItem(this.getManualStoriesKey());
    this.storyName = storyName;
    localStorage.setItem($globalStoryManager.getManualStoriesKey(), JSON.stringify(this.getManualStories()));
  }

  /** Add a new ManualStory */
  StoryManager.prototype.addManualStory = function (manualStory) {
    let manualStories = this.getManualStories();
    manualStories.push(manualStory);
    localStorage.setItem($globalStoryManager.getManualStoriesKey(), JSON.stringify(manualStories));
  }

  /** Update a ManualStory */
  StoryManager.prototype.updateManualStory = function (editManualStory) {
    let manualStories = this.getManualStories();
    manualStories = manualStories.map(manualStory => manualStory.id == editManualStory.id ? editManualStory : manualStory);
    localStorage.setItem($globalStoryManager.getManualStoriesKey(), JSON.stringify(manualStories));
  }

  /** Delete a ManualStory by Id */
  StoryManager.prototype.removeManualStory = function (id) {
    let manualStories = this.getManualStories();
    manualStories = manualStories.filter(manualStory => manualStory.id != id);
    localStorage.setItem($globalStoryManager.getManualStoriesKey(), JSON.stringify(manualStories));
  }

  /** Sort a Manual Story to new Index by Id */
  StoryManager.prototype.sortManualStory = function (id, index) {
    let manualStories = this.getManualStories();
    let tmp = manualStories.find(manualStory => manualStory.id == id);
    manualStories = manualStories.filter(manualStory => manualStory.id != id);
    manualStories.splice(index, 0, tmp);
    localStorage.setItem($globalStoryManager.getManualStoriesKey(), JSON.stringify(manualStories));
  }
  //#endregion

  /** Get all from Rules and Stories */
  StoryManager.prototype.getAllStories = function () {
    let autoStories = this.autoStoriesFromRules();
    let manualStories = this.getManualStories();
    let allStories = autoStories.concat(manualStories);
    return allStories;
  }

  return StoryManager;
})();